; PlatformIO Project Configuration File
;
;	 Build options: build flags, source filter
;	 Upload options: custom upload port, speed and extra flags
;	 Library options: dependencies, extra library storages
;	 Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]

; default_envs = windows_64
; default_envs = windows_32
; default_envs = mac_64
default_envs = elecrow32-terminal ; ELECROW ESP32 Terminal 3.5inch
; default_envs = wt32-sc01
; default_envs = wt32-sc01-plus

[env]
extra_scripts = pre:support/stars.py
lib_deps = 
	lvgl/lvgl@^8.4.0

build_flags =
	-I lib
	-D LV_LVGL_H_INCLUDE_SIMPLE


; native with sdl2
[native]
extends = env
platform = native@^1.1.3
extra_scripts = 
	${env.extra_scripts}
	support/sdl2_build_extra.py
build_flags =
	${env.build_flags}
	; Add recursive dirs for hal headers search
	!python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/sdl2')]))"
	-lSDL2
	; SDL drivers options
	-D LV_MEM_CUSTOM=1
	-D LV_DRV_NO_CONF
	-D USE_SDL
	-D SDL_HOR_RES=320
	-D SDL_VER_RES=480
	-D SDL_ZOOM=1

lib_deps =
	${env.lib_deps}
	lv_drivers=https://github.com/lvgl/lv_drivers/archive/refs/tags/v8.2.0.zip

build_src_filter =
	+<*>
	+<../hal/sdl2>
	
[env:windows_64]
extends = native
build_flags =
	${native.build_flags}
	-D SDL_INCLUDE_PATH="\"C:/msys64/mingw64/include/SDL2/SDL.h\"" ; Windows
	-L C:/msys64/mingw64/lib/ ; Windows
	-D OS_WINDOWS=1

build_src_filter =
	${native.build_src_filter}

[env:windows_32]
extends = native
build_flags =
	${native.build_flags}
	-m32
build_src_filter =
	${native.build_src_filter}

[env:mac_64]
extends = native
build_flags =
	${native.build_flags}
	-D SDL_INCLUDE_PATH="\"SDL2/SDL.h"\" ;MACOS
	-arch arm64 ; MACOS with apple silicon (eg M1)
	!find /opt/homebrew/Cellar/sdl2 -name "include" | sed "s/^/-I /" ;MACOS
	!find /opt/homebrew/Cellar/sdl2 -name "libSDL2.a" | xargs dirname | sed "s/^/-L /" ;MACOS

build_src_filter =
	${native.build_src_filter}


; esp32 hardware
[esp32]
platform = espressif32
framework = arduino
extra_scripts = 
	${env.extra_scripts}
lib_deps = 
	${env.lib_deps}
	lovyan03/LovyanGFX@^1.1.16
	fbiego/ChronosESP32@^1.4.0
	fbiego/Timber@^1.0.0
	adafruit/Adafruit AMG88xx Library @ ^1.3.2

build_flags = 
	${env.build_flags}
	; Add recursive dirs for hal headers search
	!python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/esp32')]))"
	-D LV_TICK_CUSTOM=1
	-D LV_MEM_CUSTOM=0
	-D MIN_BG_IMG=1

build_src_filter =
	+<*>
	+<../hal/esp32>

[env:elecrow32-terminal]
extends = esp32
board = esp32-s3-devkitc-1
board_build.partitions = max_app_8MB.csv
lib_deps = 
	${esp32.lib_deps}

build_flags = 
	${esp32.build_flags}
	-D ELECROW=1
	-D LV_MEM_SIZE="(128U * 1024U)"
	-D BUZZER=20

build_src_filter =
	${esp32.build_src_filter}

[env:wt32-sc01]
extends = esp32
board = esp-wrover-kit
board_build.partitions = huge_app.csv
lib_deps = 
	${esp32.lib_deps}
	smartpanle/PanelLan@^0.0.1

build_flags = 
	${esp32.build_flags}
	-DBOARD_HAS_PSRAM
	-mfix-esp32-psram-cache-issue
	-D LV_MEM_SIZE="(64U * 1024U)"

build_src_filter =
	${esp32.build_src_filter}

[env:wt32-sc01-plus]
extends = esp32
board = esp32-s3-devkitc-1
board_build.partitions = max_app_8MB.csv
board_build.mcu = esp32s3
board_build.f_cpu = 240000000L
lib_deps = 
	${esp32.lib_deps}
	smartpanle/PanelLan@^0.0.1

build_flags = 
	${esp32.build_flags}
	-DBOARD_HAS_PSRAM
	-mfix-esp32-psram-cache-issue
	-D PLUS=1
	-D LV_MEM_SIZE="(96U * 1024U)"

build_src_filter =
	${esp32.build_src_filter}

